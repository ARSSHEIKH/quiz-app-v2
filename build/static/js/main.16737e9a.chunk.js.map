{"version":3,"sources":["services/quiz_services.ts","Components/QuestionsCard.tsx","App.tsx","index.js"],"names":["getQuizData","totalQuestions","level","a","fetch","res","json","results","quiz","map","questionObj","question","answer","correct_answer","options","array","incorrect_answers","concat","sort","Math","random","errorLabel","QuestionsCard","callback","React","useState","value","setValue","handleChange","event","target","useEffect","console","log","className","style","margin","wordWrap","boxShadow","display","flexWrap","minHeight","justifyContent","backgroundColor","onSubmit","FormControl","component","marginTop","FormLabel","id","padding","fontWeight","opt","ind","key","RadioGroup","aria-label","name","onChange","FormControlLabel","control","Radio","label","Button","width","variant","color","type","onClick","emptySelected","ABC","textAlign","App","setQuiz","currentStep","setCurrentStep","finishChecker","setFinishChecker","questions","fetchQuiz","length","e","preventDefault","alt","src","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16737e9a.chunk.js","sourcesContent":["import {Quiz, QuestionType} from \"./../types/quiz_types\"\r\n\r\nconst shuffleArray = (array: any[]) => \r\n    [...array].sort(()=> Math.random()-0.5)\r\n\r\nexport const getQuizData = async(totalQuestions: number, level: string) :Promise<QuestionType[]> =>{\r\n    const res = await fetch(`https://opentdb.com/api.php?amount=${totalQuestions}&category=18&difficulty=${level}&type=multiple`);\r\n    const {results}  = await res.json();\r\n    const quiz: QuestionType[]= results.map((questionObj: Quiz)=>{\r\n        return{\r\n            question:  questionObj.question,\r\n            answer: questionObj.correct_answer,\r\n            options: shuffleArray(questionObj.incorrect_answers.concat(questionObj.correct_answer))\r\n        }\r\n    })\r\n    return quiz\r\n}","import React from 'react';\r\nimport {questionPropsType} from './../types/quiz_types';\r\nimport {Button, Radio, RadioGroup, FormControl, FormControlLabel, FormLabel} from '@material-ui/core/';\r\nimport {ABC} from \"./../App\"\r\nimport  \"./../animation.css\"\r\n\r\nlet errorLabel:string=\"\"\r\nconst QuestionsCard:React.FC<questionPropsType>=({question, options, callback})=>{\r\n    const [value, setValue] = React.useState('');\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue((event.target as HTMLInputElement).value);\r\n    };\r\n    React.useEffect(()=>{\r\n        console.log(value)\r\n    })\r\n    if(value === \"You must choose an option.\"){\r\n        errorLabel = value\r\n        console.log(errorLabel)\r\n    }\r\n    else if(value !== \"You must choose an option.\"){\r\n        errorLabel = \"\"\r\n        console.log(errorLabel)\r\n    }\r\n    return (\r\n        <div className=\"question-container\" style={{\r\n            margin: \"0 auto\",\r\n            wordWrap: \"break-word\",\r\n            boxShadow:\"0 0 5px gray\",\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            minHeight: \"450px\",\r\n            justifyContent: \"center\",\r\n            backgroundColor: \"#fffff\"\r\n            }}>\r\n            <form onSubmit={callback}>\r\n                <FormControl component=\"fieldset\" style={{marginTop: \"30px\"}}>\r\n                    <FormLabel id=\"questionBox\" className=\"animate__animated animate__bounce\" style={{\r\n                        boxShadow:\"0 0 5px gray\",\r\n                        padding: \"10px 15px\",\r\n                        fontWeight:\"bold\"\r\n                        }} component=\"legend\">{question}</FormLabel>\r\n                    {options.map((opt:string, ind: number)=>{\r\n                        return(\r\n                            <div key={ind} style={{justifyContent:\"space-around\", fontWeight:\"bold\"}}>\r\n                                <RadioGroup aria-label=\"gender\" name=\"mcqs\" value={value} onChange={handleChange}>\r\n                                    <FormControlLabel value={opt} control={<Radio />} label={opt} />\r\n                                </RadioGroup>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    <Button style={{width:\"200px\"}} variant=\"contained\" color=\"secondary\" type=\"submit\" onClick={()=>{\r\n                       setValue(ABC(value))\r\n                    }}>Submit</Button>\r\n                </FormControl>\r\n                <br/> <br/>\r\n            <h4 style={{\r\n                textAlign:\"center\", color: \"red\"\r\n                }}>{errorLabel}</h4>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default QuestionsCard;","import React, {useEffect, useState} from 'react';\r\nimport {getQuizData} from './services/quiz_services'\r\nimport {QuestionType} from \"./types/quiz_types\"\r\nimport QuestionsCard from \"./Components/QuestionsCard\"\r\nimport \"./App.css\"\r\n\r\nlet emptySelected:boolean=false\r\nexport function ABC(value:any){\r\n  console.log(\"ABC\", value)\r\n  if(value === \"\" || value === \"You must choose an option.\"){\r\n    emptySelected = true\r\n    return \"You must choose an option.\"\r\n  }\r\n  return \"\"\r\n}\r\nfunction App() {\r\n  let [quiz, setQuiz] = useState<QuestionType[]>([]);\r\n  let [currentStep, setCurrentStep] = useState(0);\r\n  let [finishChecker, setFinishChecker] =  useState(\"\");\r\n\r\n  useEffect(()=>{\r\n    async function fetchQuiz(){\r\n      const questions:QuestionType[] = await getQuizData(5, \"easy\");\r\n      console.log(questions);\r\n      setQuiz(questions);\r\n    }\r\n    fetchQuiz()\r\n  },[])\r\n\r\n  const handleSubmit=(e:React.FormEvent<EventTarget>)=>{\r\n    e.preventDefault()\r\n    if(emptySelected === true){\r\n      emptySelected=false\r\n      return\r\n    }\r\n    if(currentStep !== quiz.length-1)\r\n      setCurrentStep(++currentStep);\r\n    else\r\n      setFinishChecker(\"Done\")\r\n  }\r\n\r\n\r\n  if(!quiz.length){\r\n    return (\r\n      <div style={{textAlign:\"center\", marginTop:\"150px\"}}>\r\n        <img alt=\"Loading ...\" src=\"https://i.pinimg.com/originals/58/4b/60/584b607f5c2ff075429dc0e7b8d142ef.gif\" width=\"200\" height=\"150\"/>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <QuestionsCard\r\n        options={quiz[currentStep].options}\r\n        question={quiz[currentStep].question}\r\n        callback={handleSubmit}\r\n      />\r\n      <h2 style={{textAlign:\"center\"}}>{finishChecker}</h2>\r\n      \r\n    </div>\r\n    )\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}